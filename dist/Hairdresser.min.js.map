{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Hairdresser.min.js","webpack:///webpack/bootstrap 4a54c06d9a47b0247dc3","webpack:///./src/Hairdresser.js","webpack:///./~/invariant/browser.js","webpack:///./src/classes/Attrs.js","webpack:///./src/utils.js","webpack:///./src/classes/Controller.js","webpack:///./src/createEventManager.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_validator","_invariant","_invariant2","_utils","_classesAttrs","_classesAttrs2","_classesController","_classesController2","_createEventManager2","_createEventManager3","validator","CTRL_TYPE","TITLE","tagName","value","ETC","Hairdresser","Override","options","addListener","removeListener","controllers","generateOverrideId","topControllers","_topControllers","observerList","_observerList","createIdGenerator","generateControllerId","addControllerToOverride","override","controller","push","curTopController","selector","insertAfter","forEach","observer","onAddController","prototype","getController","attrs","toSelector","i","length","addController","type","render","arguments","undefined","renderFunc","title","meta","link","update","_this","onUpdate","restore","_this2","onPreRemoveOverride","prev","unlink","create","_getActiveController","_getActiveControllers","_this3","Object","keys","sort","map","_addObserver","_this4","removeItem","_renderOnce","eventHandlers","_renderAndListen","_createEventManager","startListeningController","stopListeningController","isControllerListening","removeController","updateOverride","removeOverride","destroyEventManager","destroy","removeObserver","renderToString","_renderOnce2","result","newTitle","newAttrs","html","toHtml","join","isElementCacheValid","elem","parentNode","head","each","name","getAttribute","getElement","cachedElem","ensureElement","element","querySelector","document","createElement","setAttribute","appendChild","_renderAndListen2","canUseDOM","getElementsByTagName","oldTitle","onStop","next","attrName","removeChild","invariant","condition","format","a","b","d","e","f","error","Error","args","argIndex","replace","framesToPop","Attrs","_data","_attrNames","_attrNamesLen","_toHtml","_toSelector","key","callback","array","item","indexOf","splice","_Attrs","_Attrs2","Controller","node","createEventManager","_ensureOverrideListener","overrideListener","_overrideListeners","OverrideListener","_getControllerListener","_controllerListeners","_ensureControllerListener","controllerListener","ControllerListener","handler","isListening","startListening","stopListening","isReadyToRemove","filter","listener","_override","listening","addControllerListener","_listener","_addListenerRet","removeControllerListener","_ref","_overrideListener","_controller","_onUpdate","_onStop","_listening"],"mappings":"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","file":"Hairdresser.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Hairdresser\"] = factory();\n\telse\n\t\troot[\"Hairdresser\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Hairdresser\"] = factory();\n\telse\n\t\troot[\"Hairdresser\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _validator;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _invariant = __webpack_require__(1);\n\t\n\tvar _invariant2 = _interopRequireDefault(_invariant);\n\t\n\tvar _utils = __webpack_require__(3);\n\t\n\tvar _classesAttrs = __webpack_require__(2);\n\t\n\tvar _classesAttrs2 = _interopRequireDefault(_classesAttrs);\n\t\n\tvar _classesController = __webpack_require__(4);\n\t\n\tvar _classesController2 = _interopRequireDefault(_classesController);\n\t\n\tvar _createEventManager2 = __webpack_require__(5);\n\t\n\tvar _createEventManager3 = _interopRequireDefault(_createEventManager2);\n\t\n\tvar validator = (_validator = {}, _validator[_classesController.CTRL_TYPE.TITLE] = function (tagName, value) {\n\t  _invariant2['default'](typeof value === 'string', 'render value for <title> must be a string');\n\t}, _validator[_classesController.CTRL_TYPE.ETC] = function (tagName, value) {\n\t  _invariant2['default'](typeof value === 'object', 'render value for <' + tagName + '> must be an object');\n\t}, _validator);\n\t\n\t/**\n\t * @callback addListener\n\t * @param {function} listener A function to be bound to event emitter.\n\t * @return {*} A value to pass to {@link removeListener}.\n\t */\n\t\n\t/**\n\t * @callback removeListener\n\t * @param {function} listener A function to be removed from event emitter.\n\t * @param {*} addListenerReturnValue Return value of addListener\n\t */\n\t\n\tvar Hairdresser = (function () {\n\t  /**\n\t   * Create a Hairdresser instance.\n\t   *\n\t   * @return {Hairdresser} Hairdresser instance.\n\t   */\n\t\n\t  Hairdresser.create = function create() {\n\t    return new Hairdresser();\n\t  };\n\t\n\t  /**\n\t   * Hairdresser constructor.\n\t   *\n\t   * @constructs Hairdresser\n\t   * @return {Hairdresser} a new Hairdresser instance.\n\t   */\n\t\n\t  function Hairdresser() {\n\t    _classCallCheck(this, Hairdresser);\n\t\n\t    var topControllers = this._topControllers = {\n\t      /* [selector]: controller */\n\t    };\n\t\n\t    var observerList = this._observerList = [];\n\t\n\t    var generateOverrideId = _utils.createIdGenerator();\n\t    var generateControllerId = _utils.createIdGenerator();\n\t\n\t    var addControllerToOverride = function addControllerToOverride(override, controller) {\n\t      _invariant2['default'](controller instanceof _classesController2['default'], 'controller must be an instance of Controller');\n\t\n\t      controller.override = override;\n\t      override.controllers.push(controller);\n\t\n\t      controller.id = generateControllerId();\n\t\n\t      // Append inserted controller to currently top controller\n\t      var curTopController = topControllers[controller.selector];\n\t      if (curTopController) {\n\t        curTopController.insertAfter(controller);\n\t      }\n\t\n\t      topControllers[controller.selector] = controller;\n\t\n\t      // Fire event to listening observers\n\t      observerList.forEach(function (observer) {\n\t        observer.onAddController(controller);\n\t      });\n\t    };\n\t\n\t    /**\n\t     * Override is the unit of override and consists of a set of controllers.\n\t     *\n\t     * When controller is added to override, the controller overrides top controller.\n\t     * That is, Added controller becomes new top controller and starts listenings,\n\t     * and previous top controller stops listening.\n\t     *\n\t     * @class Override\n\t     * @param {object} options Override options.\n\t     * @return {Override} a new Override instance.\n\t     */\n\t    function Override(options) {\n\t      _invariant2['default'](!options.addListener || options.removeListener, 'addListener requires removeListener');\n\t\n\t      this.addListener = options.addListener;\n\t      this.removeListener = options.removeListener;\n\t      this.controllers = [];\n\t      this.id = generateOverrideId();\n\t    }\n\t\n\t    Override.prototype.getController = function getController(tagName, attrs) {\n\t      var selector = tagName + (attrs ? _classesAttrs2['default'].toSelector(attrs) : '');\n\t\n\t      // Loop from tail to head to select latest inserted value.\n\t      for (var i = this.controllers.length - 1; i >= 0; --i) {\n\t        var controller = this.controllers[i];\n\t        if (controller.selector === selector) {\n\t          return controller;\n\t        }\n\t      }\n\t      return null;\n\t    };\n\t\n\t    // TODO: Inherit document from Controller class\n\t\n\t    /**\n\t     * Add controller for arbitrary element.\n\t     *\n\t     * @memberof Override\n\t     * @param {string} type Type of controller.\n\t     * @param {string} tagName Element tag name.\n\t     * @param {object} attrs Object containing key-value attribute pairs which\n\t     * is used to find element to bind controller to.\n\t     * @param {*} render A value that replaces element contents or a function\n\t     * that returns the element replacing value.\n\t     * @param {object} options Options for element controller.\n\t     * @param {addListener} options.addListener A function that adds controller\n\t     * listener to event emitter.\n\t     * @param {removeListener} options.removeListener A function that removes\n\t     * controller listener.\n\t     * @return {Override} Itself.\n\t     */\n\t    Override.prototype.addController = function addController(type, tagName, attrs, render) {\n\t      var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n\t\n\t      var renderFunc = undefined;\n\t      if (typeof render !== 'function') {\n\t        validator[type](tagName, render);\n\t        renderFunc = function () {\n\t          return render;\n\t        };\n\t      } else {\n\t        renderFunc = render;\n\t      }\n\t\n\t      var controller = new _classesController2['default'](type, tagName, attrs, renderFunc, options);\n\t      addControllerToOverride(this, controller);\n\t      return this;\n\t    };\n\t\n\t    /**\n\t     * Add controller for `<title>` element.\n\t     *\n\t     * @memberof Override\n\t     * @param {*} render A string which replaces `<title>` value or a function\n\t     * that returns the title replacing string value.\n\t     * @param {object} options Options for element controller.\n\t     * @param {addListener} options.addListener A function that adds controller\n\t     * listener to event emitter.\n\t     * @param {removeListener} options.removeListener A function that removes\n\t     * controller listener.\n\t     * @return {Override} Itself.\n\t     */\n\t    Override.prototype.title = function title(render, options) {\n\t      return this.addController(_classesController.CTRL_TYPE.TITLE, 'title', {}, render, options);\n\t    };\n\t\n\t    /**\n\t     * Add controller for `<meta>` element.\n\t     *\n\t     * @memberof Override\n\t     * @param {object} attrs Object containing key-value attribute pairs which\n\t     * is used to find element to bind controller to.\n\t     * @param {*} render An object that represents new key-value attribute pairs\n\t     * which will be added to controller's element or a function that returns\n\t     * the object.\n\t     * @param {object} options Options for element controller.\n\t     * @param {addListener} options.addListener A function that adds controller\n\t     * listener to event emitter.\n\t     * @param {removeListener} options.removeListener A function that removes\n\t     * controller listener.\n\t     * @return {Override} Itself.\n\t     */\n\t    Override.prototype.meta = function meta(attrs, render, options) {\n\t      return this.addController(_classesController.CTRL_TYPE.ETC, 'meta', attrs, render, options);\n\t    };\n\t\n\t    /**\n\t     * Add controller for `<link>` element.\n\t     *\n\t     * @memberof Override\n\t     * @param {object} attrs Object containing key-value attribute pairs which\n\t     * is used to find element to bind controller to.\n\t     * @param {*} render An object that represents new key-value attribute pairs\n\t     * which will be added to controller's element or a function that returns\n\t     * the object.\n\t     * @param {object} options Options for element controller.\n\t     * @param {addListener} options.addListener A function that adds controller\n\t     * listener to event emitter.\n\t     * @param {removeListener} options.removeListener A function that removes\n\t     * controller listener.\n\t     * @return {Override} Itself.\n\t     */\n\t    Override.prototype.link = function link(attrs, render, options) {\n\t      return this.addController(_classesController.CTRL_TYPE.ETC, 'link', attrs, render, options);\n\t    };\n\t\n\t    /**\n\t     * Rerender elements of override's listening controllers.\n\t     *\n\t     * @memberof Override\n\t     * @return {undefined}\n\t     */\n\t    Override.prototype.update = function update() {\n\t      var _this = this;\n\t\n\t      // Fire event to listening observers\n\t      observerList.forEach(function (observer) {\n\t        observer.onUpdate(_this);\n\t      });\n\t    };\n\t\n\t    /**\n\t     * Remove all override's controllers.\n\t     *\n\t     * When controller is top, the previous controller will become top.\n\t     * If previous controller does not exists, the element bound to this\n\t     * controller will be removed.\n\t     *\n\t     * @memberof Override\n\t     * @return {undefined}\n\t     */\n\t    Override.prototype.restore = function restore() {\n\t      var _this2 = this;\n\t\n\t      // Fire event to listening observers\n\t      observerList.forEach(function (observer) {\n\t        observer.onPreRemoveOverride(_this2);\n\t      });\n\t\n\t      this.controllers.forEach(function (controller) {\n\t        if (controller.prev) {\n\t          topControllers[controller.selector] = controller.prev;\n\t        } else {\n\t          delete topControllers[controller.selector];\n\t        }\n\t        controller.unlink();\n\t      });\n\t    };\n\t\n\t    this.Override = Override;\n\t  }\n\t\n\t  Hairdresser.prototype._getActiveController = function _getActiveController(tagName, attrs) {\n\t    var selector = tagName + (attrs ? _classesAttrs2['default'].toSelector(attrs) : '');\n\t    return this._topControllers[selector];\n\t  };\n\t\n\t  Hairdresser.prototype._getActiveControllers = function _getActiveControllers() {\n\t    var _this3 = this;\n\t\n\t    return Object.keys(this._topControllers).sort().map(function (selector) {\n\t      return _this3._topControllers[selector];\n\t    });\n\t  };\n\t\n\t  Hairdresser.prototype._addObserver = function _addObserver(observer) {\n\t    var _this4 = this;\n\t\n\t    this._observerList.push(observer);\n\t    return function () {\n\t      _utils.removeItem(_this4._observerList, observer);\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Create a override instance for overriding current top controllers.\n\t   *\n\t   * When override listener receives an event, top controllers in override\n\t   * rerenders their elements.\n\t   *\n\t   * @param {object} options Override options\n\t   * @param {addListener} options.addListener A function that adds override\n\t   * listener to event listener.\n\t   * @param {removeListener} options.removeListener A function that removes\n\t   * override listener.\n\t   * @return {Override} A override instance.\n\t   */\n\t\n\t  Hairdresser.prototype.override = function override() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    return new this.Override(options);\n\t  };\n\t\n\t  Hairdresser.prototype._renderOnce = function _renderOnce(eventHandlers) {\n\t    this._getActiveControllers().forEach(function (controller) {\n\t      eventHandlers[controller.type].onUpdate(controller);\n\t    });\n\t  };\n\t\n\t  Hairdresser.prototype._renderAndListen = function _renderAndListen(eventHandlers) {\n\t    var _createEventManager = _createEventManager3['default'](eventHandlers);\n\t\n\t    var startListeningController = _createEventManager.startListeningController;\n\t    var stopListeningController = _createEventManager.stopListeningController;\n\t    var isControllerListening = _createEventManager.isControllerListening;\n\t    var removeController = _createEventManager.removeController;\n\t    var updateOverride = _createEventManager.updateOverride;\n\t    var removeOverride = _createEventManager.removeOverride;\n\t    var destroyEventManager = _createEventManager.destroy;\n\t\n\t    // Render and start listening\n\t    this._getActiveControllers().forEach(startListeningController);\n\t\n\t    var removeObserver = this._addObserver({\n\t      onAddController: function onAddController(controller) {\n\t        // Add controller listeners\n\t        if (controller.prev) {\n\t          stopListeningController(controller.prev);\n\t        }\n\t        startListeningController(controller);\n\t      },\n\t\n\t      onUpdate: function onUpdate(override) {\n\t        // Update controller listeners\n\t        updateOverride(override);\n\t      },\n\t\n\t      onPreRemoveOverride: function onPreRemoveOverride(override) {\n\t        override.controllers.forEach(function (controller) {\n\t          if (isControllerListening(controller)) {\n\t            stopListeningController(controller);\n\t            if (controller.prev) {\n\t              startListeningController(controller.prev);\n\t            }\n\t          }\n\t          removeController(controller);\n\t        });\n\t        removeOverride(override);\n\t      }\n\t    });\n\t\n\t    return function () {\n\t      removeObserver();\n\t      destroyEventManager();\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Renders HTML elements as a markup string.\n\t   *\n\t   * @return {string} the HTML markup\n\t   */\n\t\n\t  Hairdresser.prototype.renderToString = function renderToString() {\n\t    var _renderOnce2;\n\t\n\t    var result = [];\n\t\n\t    this._renderOnce((_renderOnce2 = {}, _renderOnce2[_classesController.CTRL_TYPE.TITLE] = {\n\t      onUpdate: function onUpdate(controller) {\n\t        var newTitle = controller.render();\n\t        validator[_classesController.CTRL_TYPE.TITLE](controller.tagName, newTitle);\n\t\n\t        result.push('<title>' + newTitle + '</title>');\n\t      }\n\t    }, _renderOnce2[_classesController.CTRL_TYPE.ETC] = {\n\t      onUpdate: function onUpdate(controller) {\n\t        var newAttrs = controller.render();\n\t        validator[_classesController.CTRL_TYPE.ETC](controller.tagName, newAttrs);\n\t\n\t        // Update attributes\n\t        result.push('<' + controller.tagName + ' ' + controller.attrs.html + ' ' + _classesAttrs2['default'].toHtml(newAttrs) + '>');\n\t      }\n\t    }, _renderOnce2));\n\t\n\t    return result.join('');\n\t  };\n\t\n\t  /**\n\t   * Renders HTML elements into the DOM in the `<head>` element,\n\t   * and watch further changes of the hairdresser instance.\n\t   *\n\t   * @return {function} Restore changes and stop watching the hairdresser\n\t   * instance function.\n\t   */\n\t\n\t  Hairdresser.prototype.render = function render() {\n\t    var _renderAndListen2;\n\t\n\t    _invariant2['default'](_utils.canUseDOM(), 'Cannot use DOM object. ' + 'Make sure `window` and `document` are available globally.');\n\t\n\t    var head = document.getElementsByTagName('head')[0];\n\t\n\t    function isElementCacheValid(elem, attrs) {\n\t      if (elem.parentNode !== head) {\n\t        return false;\n\t      }\n\t      return attrs.each(function (name, value) {\n\t        return elem.getAttribute(name) === value;\n\t      });\n\t    }\n\t\n\t    var cachedElem = {};\n\t\n\t    function getElement(controller) {\n\t      var elem = cachedElem[controller.id];\n\t      if (!elem) {\n\t        return null;\n\t      }\n\t\n\t      if (isElementCacheValid(elem, controller.attrs)) {\n\t        return elem;\n\t      }\n\t\n\t      delete cachedElem[controller.id];\n\t      return null;\n\t    }\n\t\n\t    function ensureElement(controller) {\n\t      var element = getElement(controller);\n\t      if (element) {\n\t        return element;\n\t      }\n\t\n\t      element = head.querySelector('' + controller.selector);\n\t\n\t      if (element) {\n\t        cachedElem[controller.id] = element;\n\t        return element;\n\t      }\n\t\n\t      element = document.createElement(controller.tagName);\n\t      controller.attrs.each(function (name, value) {\n\t        element.setAttribute(name, value);\n\t      });\n\t      head.appendChild(element);\n\t\n\t      cachedElem[controller.id] = element;\n\t      return element;\n\t    }\n\t\n\t    var oldTitle = document.title;\n\t\n\t    return this._renderAndListen((_renderAndListen2 = {}, _renderAndListen2[_classesController.CTRL_TYPE.TITLE] = {\n\t      onUpdate: function onUpdate(controller) {\n\t        var newTitle = controller.render();\n\t        validator[_classesController.CTRL_TYPE.TITLE](controller.tagName, newTitle);\n\t        document.title = newTitle;\n\t      },\n\t\n\t      onStop: function onStop(controller) {\n\t        if (!controller.prev && !controller.next) {\n\t          document.title = oldTitle;\n\t        }\n\t      }\n\t    }, _renderAndListen2[_classesController.CTRL_TYPE.ETC] = {\n\t      onUpdate: function onUpdate(controller) {\n\t        var element = ensureElement(controller);\n\t\n\t        // Update attributes\n\t        var newAttrs = controller.render();\n\t        validator[_classesController.CTRL_TYPE.ETC](controller.tagName, newAttrs);\n\t\n\t        Object.keys(newAttrs).forEach(function (attrName) {\n\t          element.setAttribute(attrName, newAttrs[attrName]);\n\t        });\n\t      },\n\t\n\t      onStop: function onStop(controller) {\n\t        if (!controller.prev && !controller.next) {\n\t          var element = getElement(controller);\n\t          if (element) {\n\t            element.parentNode.removeChild(element);\n\t          }\n\t        }\n\t      }\n\t    }, _renderAndListen2));\n\t  };\n\t\n\t  return Hairdresser;\n\t})();\n\t\n\texports['default'] = Hairdresser;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule invariant\n\t */\n\t\n\t'use strict';\n\t\n\t/**\n\t * Use invariant() to assert state which your program assumes to be true.\n\t *\n\t * Provide sprintf-style format (only %s is supported) and arguments\n\t * to provide information about what broke and what you were\n\t * expecting.\n\t *\n\t * The invariant message will be stripped in production, but the invariant\n\t * will remain to ensure logic does not differ in production.\n\t */\n\t\n\tvar invariant = function(condition, format, a, b, c, d, e, f) {\n\t  if (false) {\n\t    if (format === undefined) {\n\t      throw new Error('invariant requires an error message argument');\n\t    }\n\t  }\n\t\n\t  if (!condition) {\n\t    var error;\n\t    if (format === undefined) {\n\t      error = new Error(\n\t        'Minified exception occurred; use the non-minified dev environment ' +\n\t        'for the full error message and additional helpful warnings.'\n\t      );\n\t    } else {\n\t      var args = [a, b, c, d, e, f];\n\t      var argIndex = 0;\n\t      error = new Error(\n\t        'Invariant Violation: ' +\n\t        format.replace(/%s/g, function() { return args[argIndex++]; })\n\t      );\n\t    }\n\t\n\t    error.framesToPop = 1; // we don't care about invariant's own frame\n\t    throw error;\n\t  }\n\t};\n\t\n\tmodule.exports = invariant;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar Attrs = (function () {\n\t  Attrs._toHtml = function _toHtml(keys, obj) {\n\t    return keys.map(function (key) {\n\t      return key + '=\"' + obj[key] + '\"';\n\t    }).join(' ');\n\t  };\n\t\n\t  Attrs.toHtml = function toHtml(obj) {\n\t    return Attrs._toHtml(Object.keys(obj).sort(), obj);\n\t  };\n\t\n\t  Attrs._toSelector = function _toSelector(keys, obj) {\n\t    return keys.map(function (attrName) {\n\t      return '[' + attrName + '=\\'' + obj[attrName] + '\\']';\n\t    }).join('');\n\t  };\n\t\n\t  Attrs.toSelector = function toSelector(obj) {\n\t    return Attrs._toSelector(Object.keys(obj).sort(), obj);\n\t  };\n\t\n\t  function Attrs(obj) {\n\t    _classCallCheck(this, Attrs);\n\t\n\t    this._data = obj;\n\t\n\t    this._attrNames = Object.keys(this._data).sort();\n\t    this._attrNamesLen = this._attrNames.length;\n\t\n\t    this.html = Attrs._toHtml(this._attrNames, this._data);\n\t    this.selector = Attrs._toSelector(this._attrNames, this._data);\n\t  }\n\t\n\t  Attrs.prototype.each = function each(callback) {\n\t    for (var i = 0; i < this._attrNamesLen; ++i) {\n\t      var attrName = this._attrNames[i];\n\t      if (callback(attrName, this._data[attrName]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  };\n\t\n\t  return Attrs;\n\t})();\n\t\n\texports['default'] = Attrs;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tfunction removeItem(array, item) {\n\t  var i = array.indexOf(item);\n\t  if (i !== -1) {\n\t    array.splice(i, 1);\n\t  }\n\t}\n\t\n\tfunction createIdGenerator() {\n\t  var id = 0;\n\t  return function () {\n\t    return ++id;\n\t  };\n\t}\n\t\n\tfunction canUseDOM() {\n\t  return typeof document !== 'undefined';\n\t}\n\t\n\texports['default'] = {\n\t  removeItem: removeItem,\n\t  createIdGenerator: createIdGenerator,\n\t  canUseDOM: canUseDOM\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _invariant = __webpack_require__(1);\n\t\n\tvar _invariant2 = _interopRequireDefault(_invariant);\n\t\n\tvar _Attrs = __webpack_require__(2);\n\t\n\tvar _Attrs2 = _interopRequireDefault(_Attrs);\n\t\n\tvar CTRL_TYPE = {\n\t  TITLE: 'title',\n\t  ETC: 'etc'\n\t};\n\t\n\texports.CTRL_TYPE = CTRL_TYPE;\n\tfunction link(prev, next) {\n\t  if (prev) {\n\t    prev.next = next;\n\t  }\n\t\n\t  if (next) {\n\t    next.prev = prev;\n\t  }\n\t}\n\t\n\tvar Controller = (function () {\n\t\n\t  /**\n\t   * Controller constructor.\n\t   *\n\t   * Controller is an object that manages an element in `<head>` element.\n\t   * If multiple controllers are bound to one element, only the last bound\n\t   * controller is used.\n\t   * The last bound controller is called top controller.\n\t   *\n\t   * When top controller is removed, previous controller of that one becomes\n\t   * the new top controller.\n\t   *\n\t   * @constructs Controller\n\t   * @param {string} type Type of controller.\n\t   * @param {string} tagName Element tag name.\n\t   * @param {object} attrs Object containing key-value attribute pairs, which is\n\t   * used to find element to bind controller to.\n\t   * @param {function} render A function that returns new element value.\n\t   * The type of return value depends on controller type.\n\t   * @param {object} options Controller options.\n\t   * @param {addListener} options.addListener A function that adds controller\n\t   * listener to event emitter.\n\t   * @param {removeListener} options.removeListener A function that removes\n\t   * controller listener.\n\t   * @return {Controller} a new Controller instance.\n\t   */\n\t\n\t  function Controller(type, tagName, attrs, render) {\n\t    var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n\t\n\t    _classCallCheck(this, Controller);\n\t\n\t    _invariant2['default'](typeof render === 'function', 'render function is required');\n\t    _invariant2['default'](!options.addListener || options.removeListener, 'addListener requires removeListener');\n\t\n\t    this.type = type;\n\t\n\t    this.attrs = new _Attrs2['default'](attrs);\n\t    this.tagName = tagName;\n\t    this.selector = this.tagName + this.attrs.selector;\n\t\n\t    this.render = render;\n\t\n\t    this.addListener = options.addListener;\n\t    this.removeListener = options.removeListener;\n\t  }\n\t\n\t  Controller.prototype.insertAfter = function insertAfter(node) {\n\t    link(node, this.next);\n\t    link(this, node);\n\t  };\n\t\n\t  Controller.prototype.unlink = function unlink() {\n\t    link(this.prev, this.next);\n\t    this.prev = undefined;\n\t    this.next = undefined;\n\t  };\n\t\n\t  return Controller;\n\t})();\n\t\n\texports['default'] = Controller;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports['default'] = createEventManager;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _invariant = __webpack_require__(1);\n\t\n\tvar _invariant2 = _interopRequireDefault(_invariant);\n\t\n\tvar _utils = __webpack_require__(3);\n\t\n\tvar OverrideListener = (function () {\n\t  function OverrideListener(override) {\n\t    _classCallCheck(this, OverrideListener);\n\t\n\t    this._controllerListeners = [];\n\t    this._override = override;\n\t\n\t    this.listening = false;\n\t  }\n\t\n\t  OverrideListener.prototype.onUpdate = function onUpdate() {\n\t    this._controllerListeners.forEach(function (listener) {\n\t      return listener.onUpdate();\n\t    });\n\t  };\n\t\n\t  OverrideListener.prototype.addControllerListener = function addControllerListener(controllerListener) {\n\t    var _this = this;\n\t\n\t    this._controllerListeners.push(controllerListener);\n\t\n\t    if (this._override.addListener && !this.listening) {\n\t      this.listening = true;\n\t      this._listener = function () {\n\t        _this.onUpdate();\n\t      };\n\t      this._addListenerRet = this._override.addListener(this._listener);\n\t    }\n\t  };\n\t\n\t  OverrideListener.prototype.removeControllerListener = function removeControllerListener(controllerListener) {\n\t    _utils.removeItem(this._controllerListeners, controllerListener);\n\t\n\t    if (this.listening && this._controllerListeners.length === 0) {\n\t      this._override.removeListener(this._listener, this._addListenerRet);\n\t      this.listening = false;\n\t    }\n\t  };\n\t\n\t  OverrideListener.prototype.isReadyToRemove = function isReadyToRemove() {\n\t    return !this.listening && this._controllerListeners.length === 0;\n\t  };\n\t\n\t  return OverrideListener;\n\t})();\n\t\n\tvar ControllerListener = (function () {\n\t  function ControllerListener(_ref) {\n\t    var controller = _ref.controller;\n\t    var overrideListener = _ref.overrideListener;\n\t    var handler = _ref.handler;\n\t\n\t    _classCallCheck(this, ControllerListener);\n\t\n\t    this._overrideListener = overrideListener;\n\t    this.controller = this._controller = controller;\n\t\n\t    this._onUpdate = handler.onUpdate;\n\t    this._onStop = handler.onStop || function onStop() {};\n\t\n\t    this._listening = false;\n\t  }\n\t\n\t  ControllerListener.prototype.onUpdate = function onUpdate() {\n\t    this._onUpdate(this._controller);\n\t    return this;\n\t  };\n\t\n\t  ControllerListener.prototype.onStop = function onStop() {\n\t    this._onStop(this._controller);\n\t    return this;\n\t  };\n\t\n\t  ControllerListener.prototype.startListening = function startListening() {\n\t    var _this2 = this;\n\t\n\t    this._overrideListener.addControllerListener(this);\n\t    if (this._controller.addListener) {\n\t      this._listener = function () {\n\t        _this2.onUpdate();\n\t      };\n\t      this._addListenerRet = this._controller.addListener(this._listener);\n\t    }\n\t    this._listening = true;\n\t    return this;\n\t  };\n\t\n\t  ControllerListener.prototype.stopListening = function stopListening() {\n\t    this._overrideListener.removeControllerListener(this);\n\t    if (this._controller.removeListener) {\n\t      this._controller.removeListener(this._listener, this._addListenerRet);\n\t    }\n\t    this._listening = false;\n\t    return this;\n\t  };\n\t\n\t  ControllerListener.prototype.isListening = function isListening() {\n\t    return this._listening;\n\t  };\n\t\n\t  ControllerListener.prototype.isReadyToRemove = function isReadyToRemove() {\n\t    return !this.isListening();\n\t  };\n\t\n\t  return ControllerListener;\n\t})();\n\t\n\tfunction createEventManager(eventHandlers) {\n\t  var _overrideListeners = {\n\t    /* [override.id]: overriderListener */\n\t  };\n\t\n\t  var _controllerListeners = {\n\t    /* [controller.id]: controllerListener */\n\t  };\n\t\n\t  function _ensureOverrideListener(override) {\n\t    var overrideListener = _overrideListeners[override.id];\n\t    if (!overrideListener) {\n\t      overrideListener = _overrideListeners[override.id] = new OverrideListener(override);\n\t    }\n\t    return overrideListener;\n\t  }\n\t\n\t  function _getControllerListener(controller) {\n\t    return _controllerListeners[controller.id];\n\t  }\n\t\n\t  function _ensureControllerListener(controller) {\n\t    var controllerListener = _getControllerListener(controller);\n\t    if (controllerListener) {\n\t      return controllerListener;\n\t    }\n\t\n\t    var overrideListener = _ensureOverrideListener(controller.override);\n\t    controllerListener = _controllerListeners[controller.id] = new ControllerListener({\n\t      controller: controller,\n\t      overrideListener: overrideListener,\n\t      handler: eventHandlers[controller.type]\n\t    });\n\t    return controllerListener;\n\t  }\n\t\n\t  function isControllerListening(controller) {\n\t    var controllerListener = _getControllerListener(controller);\n\t    if (!controllerListener) {\n\t      return false;\n\t    }\n\t\n\t    return controllerListener.isListening();\n\t  }\n\t\n\t  function startListeningController(controller) {\n\t    var controllerListener = _ensureControllerListener(controller);\n\t    controllerListener.onUpdate().startListening();\n\t  }\n\t\n\t  function stopListeningController(controller) {\n\t    _invariant2['default'](isControllerListening(controller), 'Only listening controller can be stopped');\n\t\n\t    var controllerListener = _getControllerListener(controller);\n\t    controllerListener.stopListening().onStop();\n\t  }\n\t\n\t  function removeController(controller) {\n\t    var controllerListener = _getControllerListener(controller);\n\t    if (!controllerListener) {\n\t      return;\n\t    }\n\t\n\t    _invariant2['default'](controllerListener.isReadyToRemove(), 'ControllerListener is not ready to remove');\n\t\n\t    delete _controllerListeners[controller.id];\n\t  }\n\t\n\t  function updateOverride(override) {\n\t    var overrideListener = _overrideListeners[override.id];\n\t    if (!overrideListener) {\n\t      return;\n\t    }\n\t\n\t    overrideListener.onUpdate();\n\t  }\n\t\n\t  function removeOverride(override) {\n\t    var overrideListener = _overrideListeners[override.id];\n\t    if (!overrideListener) {\n\t      return;\n\t    }\n\t\n\t    _invariant2['default'](overrideListener.isReadyToRemove(), 'OverrideListener is not ready to remove');\n\t\n\t    delete _overrideListeners[override.id];\n\t  }\n\t\n\t  function destroy() {\n\t    Object.keys(_controllerListeners).map(function (id) {\n\t      return _controllerListeners[id];\n\t    }).filter(function (listener) {\n\t      return listener.isListening();\n\t    }).forEach(function (listener) {\n\t      listener.stopListening().onStop();\n\t    });\n\t  }\n\t\n\t  return {\n\t    startListeningController: startListeningController,\n\t    stopListeningController: stopListeningController,\n\t    isControllerListening: isControllerListening,\n\t    removeController: removeController,\n\t    updateOverride: updateOverride,\n\t    removeOverride: removeOverride,\n\t    destroy: destroy\n\t  };\n\t}\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** Hairdresser.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4a54c06d9a47b0247dc3\n **/","import invariant from 'invariant';\n\nimport {\n  canUseDOM,\n  removeItem,\n  createIdGenerator,\n} from './utils';\nimport Attrs from './classes/Attrs';\nimport Controller, {CTRL_TYPE} from './classes/Controller';\nimport createEventManager from './createEventManager';\n\nconst validator = {\n  [CTRL_TYPE.TITLE]: (tagName, value) => {\n    invariant(typeof value === 'string', 'render value for <title> must be a string');\n  },\n\n  [CTRL_TYPE.ETC]: (tagName, value) => {\n    invariant(typeof value === 'object', `render value for <${tagName}> must be an object`);\n  },\n};\n\n/**\n * @callback addListener\n * @param {function} listener A function to be bound to event emitter.\n * @return {*} A value to pass to {@link removeListener}.\n */\n\n/**\n * @callback removeListener\n * @param {function} listener A function to be removed from event emitter.\n * @param {*} addListenerReturnValue Return value of addListener\n */\n\nexport default class Hairdresser {\n  /**\n   * Create a Hairdresser instance.\n   *\n   * @return {Hairdresser} Hairdresser instance.\n   */\n  static create() {\n    return new Hairdresser();\n  }\n\n  /**\n   * Hairdresser constructor.\n   *\n   * @constructs Hairdresser\n   * @return {Hairdresser} a new Hairdresser instance.\n   */\n  constructor() {\n    const topControllers = this._topControllers = {\n      /* [selector]: controller */\n    };\n\n    const observerList = this._observerList = [];\n\n    const generateOverrideId = createIdGenerator();\n    const generateControllerId = createIdGenerator();\n\n    const addControllerToOverride = (override, controller) => {\n      invariant(controller instanceof Controller,\n                'controller must be an instance of Controller');\n\n      controller.override = override;\n      override.controllers.push(controller);\n\n      controller.id = generateControllerId();\n\n      // Append inserted controller to currently top controller\n      const curTopController = topControllers[controller.selector];\n      if (curTopController) {\n        curTopController.insertAfter(controller);\n      }\n\n      topControllers[controller.selector] = controller;\n\n      // Fire event to listening observers\n      observerList.forEach(observer => {\n        observer.onAddController(controller);\n      });\n    };\n\n    /**\n     * Override is the unit of override and consists of a set of controllers.\n     *\n     * When controller is added to override, the controller overrides top controller.\n     * That is, Added controller becomes new top controller and starts listenings,\n     * and previous top controller stops listening.\n     *\n     * @class Override\n     * @param {object} options Override options.\n     * @return {Override} a new Override instance.\n     */\n    function Override(options) {\n      invariant(!options.addListener || options.removeListener,\n                'addListener requires removeListener');\n\n      this.addListener = options.addListener;\n      this.removeListener = options.removeListener;\n      this.controllers = [];\n      this.id = generateOverrideId();\n    }\n\n    Override.prototype.getController = function getController(tagName, attrs) {\n      const selector = tagName + (attrs ? Attrs.toSelector(attrs) : '');\n\n      // Loop from tail to head to select latest inserted value.\n      for (let i = this.controllers.length - 1; i >= 0; --i) {\n        const controller = this.controllers[i];\n        if (controller.selector === selector) {\n          return controller;\n        }\n      }\n      return null;\n    };\n\n    // TODO: Inherit document from Controller class\n\n    /**\n     * Add controller for arbitrary element.\n     *\n     * @memberof Override\n     * @param {string} type Type of controller.\n     * @param {string} tagName Element tag name.\n     * @param {object} attrs Object containing key-value attribute pairs which\n     * is used to find element to bind controller to.\n     * @param {*} render A value that replaces element contents or a function\n     * that returns the element replacing value.\n     * @param {object} options Options for element controller.\n     * @param {addListener} options.addListener A function that adds controller\n     * listener to event emitter.\n     * @param {removeListener} options.removeListener A function that removes\n     * controller listener.\n     * @return {Override} Itself.\n     */\n    Override.prototype.addController = function addController(type, tagName, attrs,\n                                                              render, options = {}) {\n      let renderFunc;\n      if (typeof render !== 'function') {\n        validator[type](tagName, render);\n        renderFunc = () => render;\n      } else {\n        renderFunc = render;\n      }\n\n      const controller = new Controller(type, tagName, attrs, renderFunc, options);\n      addControllerToOverride(this, controller);\n      return this;\n    };\n\n    /**\n     * Add controller for `<title>` element.\n     *\n     * @memberof Override\n     * @param {*} render A string which replaces `<title>` value or a function\n     * that returns the title replacing string value.\n     * @param {object} options Options for element controller.\n     * @param {addListener} options.addListener A function that adds controller\n     * listener to event emitter.\n     * @param {removeListener} options.removeListener A function that removes\n     * controller listener.\n     * @return {Override} Itself.\n     */\n    Override.prototype.title = function title(render, options) {\n      return this.addController(CTRL_TYPE.TITLE, 'title', {}, render, options);\n    };\n\n    /**\n     * Add controller for `<meta>` element.\n     *\n     * @memberof Override\n     * @param {object} attrs Object containing key-value attribute pairs which\n     * is used to find element to bind controller to.\n     * @param {*} render An object that represents new key-value attribute pairs\n     * which will be added to controller's element or a function that returns\n     * the object.\n     * @param {object} options Options for element controller.\n     * @param {addListener} options.addListener A function that adds controller\n     * listener to event emitter.\n     * @param {removeListener} options.removeListener A function that removes\n     * controller listener.\n     * @return {Override} Itself.\n     */\n    Override.prototype.meta = function meta(attrs, render, options) {\n      return this.addController(CTRL_TYPE.ETC, 'meta', attrs, render, options);\n    };\n\n    /**\n     * Add controller for `<link>` element.\n     *\n     * @memberof Override\n     * @param {object} attrs Object containing key-value attribute pairs which\n     * is used to find element to bind controller to.\n     * @param {*} render An object that represents new key-value attribute pairs\n     * which will be added to controller's element or a function that returns\n     * the object.\n     * @param {object} options Options for element controller.\n     * @param {addListener} options.addListener A function that adds controller\n     * listener to event emitter.\n     * @param {removeListener} options.removeListener A function that removes\n     * controller listener.\n     * @return {Override} Itself.\n     */\n    Override.prototype.link = function link(attrs, render, options) {\n      return this.addController(CTRL_TYPE.ETC, 'link', attrs, render, options);\n    };\n\n    /**\n     * Rerender elements of override's listening controllers.\n     *\n     * @memberof Override\n     * @return {undefined}\n     */\n    Override.prototype.update = function update() {\n      // Fire event to listening observers\n      observerList.forEach(observer => {\n        observer.onUpdate(this);\n      });\n    };\n\n    /**\n     * Remove all override's controllers.\n     *\n     * When controller is top, the previous controller will become top.\n     * If previous controller does not exists, the element bound to this\n     * controller will be removed.\n     *\n     * @memberof Override\n     * @return {undefined}\n     */\n    Override.prototype.restore = function restore() {\n      // Fire event to listening observers\n      observerList.forEach(observer => {\n        observer.onPreRemoveOverride(this);\n      });\n\n      this.controllers.forEach(controller => {\n        if (controller.prev) {\n          topControllers[controller.selector] = controller.prev;\n        } else {\n          delete topControllers[controller.selector];\n        }\n        controller.unlink();\n      });\n    };\n\n    this.Override = Override;\n  }\n\n  _getActiveController(tagName, attrs) {\n    const selector = tagName + (attrs ? Attrs.toSelector(attrs) : '');\n    return this._topControllers[selector];\n  }\n\n  _getActiveControllers() {\n    return Object.keys(this._topControllers).sort()\n      .map(selector => this._topControllers[selector]);\n  }\n\n  _addObserver(observer) {\n    this._observerList.push(observer);\n    return () => {\n      removeItem(this._observerList, observer);\n    };\n  }\n\n  /**\n   * Create a override instance for overriding current top controllers.\n   *\n   * When override listener receives an event, top controllers in override\n   * rerenders their elements.\n   *\n   * @param {object} options Override options\n   * @param {addListener} options.addListener A function that adds override\n   * listener to event listener.\n   * @param {removeListener} options.removeListener A function that removes\n   * override listener.\n   * @return {Override} A override instance.\n   */\n  override(options = {}) {\n    return new this.Override(options);\n  }\n\n  _renderOnce(eventHandlers) {\n    this._getActiveControllers().forEach(controller => {\n      eventHandlers[controller.type].onUpdate(controller);\n    });\n  }\n\n  _renderAndListen(eventHandlers) {\n    const {\n      startListeningController,\n      stopListeningController,\n      isControllerListening,\n      removeController,\n      updateOverride,\n      removeOverride,\n      destroy: destroyEventManager,\n    } = createEventManager(eventHandlers);\n\n    // Render and start listening\n    this._getActiveControllers().forEach(startListeningController);\n\n    const removeObserver = this._addObserver({\n      onAddController: controller => {\n        // Add controller listeners\n        if (controller.prev) {\n          stopListeningController(controller.prev);\n        }\n        startListeningController(controller);\n      },\n\n      onUpdate: override => {\n        // Update controller listeners\n        updateOverride(override);\n      },\n\n      onPreRemoveOverride: override => {\n        override.controllers.forEach(controller => {\n          if (isControllerListening(controller)) {\n            stopListeningController(controller);\n            if (controller.prev) {\n              startListeningController(controller.prev);\n            }\n          }\n          removeController(controller);\n        });\n        removeOverride(override);\n      },\n    });\n\n    return () => {\n      removeObserver();\n      destroyEventManager();\n    };\n  }\n\n  /**\n   * Renders HTML elements as a markup string.\n   *\n   * @return {string} the HTML markup\n   */\n  renderToString() {\n    const result = [];\n\n    this._renderOnce({\n      [CTRL_TYPE.TITLE]: {\n        onUpdate: controller => {\n          const newTitle = controller.render();\n          validator[CTRL_TYPE.TITLE](controller.tagName, newTitle);\n\n          result.push(`<title>${newTitle}</title>`);\n        },\n      },\n      [CTRL_TYPE.ETC]: {\n        onUpdate: controller => {\n          const newAttrs = controller.render();\n          validator[CTRL_TYPE.ETC](controller.tagName, newAttrs);\n\n          // Update attributes\n          result.push(\n            `<${controller.tagName} ${controller.attrs.html} ${Attrs.toHtml(newAttrs)}>`\n          );\n        },\n      },\n    });\n\n    return result.join('');\n  }\n\n  /**\n   * Renders HTML elements into the DOM in the `<head>` element,\n   * and watch further changes of the hairdresser instance.\n   *\n   * @return {function} Restore changes and stop watching the hairdresser\n   * instance function.\n   */\n  render() {\n    invariant(canUseDOM(),\n              'Cannot use DOM object. ' +\n              'Make sure `window` and `document` are available globally.');\n\n    const head = document.getElementsByTagName('head')[0];\n\n    function isElementCacheValid(elem, attrs) {\n      if (elem.parentNode !== head) {\n        return false;\n      }\n      return attrs.each((name, value) => elem.getAttribute(name) === value);\n    }\n\n    const cachedElem = {};\n\n    function getElement(controller) {\n      const elem = cachedElem[controller.id];\n      if (!elem) {\n        return null;\n      }\n\n      if (isElementCacheValid(elem, controller.attrs)) {\n        return elem;\n      }\n\n      delete cachedElem[controller.id];\n      return null;\n    }\n\n    function ensureElement(controller) {\n      let element = getElement(controller);\n      if (element) {\n        return element;\n      }\n\n      element = head.querySelector(`${controller.selector}`);\n\n      if (element) {\n        cachedElem[controller.id] = element;\n        return element;\n      }\n\n      element = document.createElement(controller.tagName);\n      controller.attrs.each((name, value) => {\n        element.setAttribute(name, value);\n      });\n      head.appendChild(element);\n\n      cachedElem[controller.id] = element;\n      return element;\n    }\n\n    const oldTitle = document.title;\n\n    return this._renderAndListen({\n      [CTRL_TYPE.TITLE]: {\n        onUpdate: controller => {\n          const newTitle = controller.render();\n          validator[CTRL_TYPE.TITLE](controller.tagName, newTitle);\n          document.title = newTitle;\n        },\n\n        onStop: controller => {\n          if (!controller.prev && !controller.next) {\n            document.title = oldTitle;\n          }\n        },\n      },\n      [CTRL_TYPE.ETC]: {\n        onUpdate: controller => {\n          const element = ensureElement(controller);\n\n          // Update attributes\n          const newAttrs = controller.render();\n          validator[CTRL_TYPE.ETC](controller.tagName, newAttrs);\n\n          Object.keys(newAttrs).forEach(attrName => {\n            element.setAttribute(attrName, newAttrs[attrName]);\n          });\n        },\n\n        onStop: controller => {\n          if (!controller.prev && !controller.next) {\n            const element = getElement(controller);\n            if (element) {\n              element.parentNode.removeChild(element);\n            }\n          }\n        },\n      },\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Hairdresser.js\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/invariant/browser.js\n ** module id = 1\n ** module chunks = 0\n **/","export default class Attrs {\n  static _toHtml(keys, obj) {\n    return keys\n      .map(key => `${key}=\"${obj[key]}\"`)\n      .join(' ');\n  }\n\n  static toHtml(obj) {\n    return Attrs._toHtml(Object.keys(obj).sort(), obj);\n  }\n\n  static _toSelector(keys, obj) {\n    return keys\n      .map(attrName => `[${attrName}='${obj[attrName]}']`)\n      .join('');\n  }\n\n  static toSelector(obj) {\n    return Attrs._toSelector(Object.keys(obj).sort(), obj);\n  }\n\n  constructor(obj) {\n    this._data = obj;\n\n    this._attrNames = Object.keys(this._data).sort();\n    this._attrNamesLen = this._attrNames.length;\n\n    this.html = Attrs._toHtml(this._attrNames, this._data);\n    this.selector = Attrs._toSelector(this._attrNames, this._data);\n  }\n\n  each(callback) {\n    for (let i = 0; i < this._attrNamesLen; ++i) {\n      const attrName = this._attrNames[i];\n      if (callback(attrName, this._data[attrName]) === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/classes/Attrs.js\n **/","function removeItem(array, item) {\n  const i = array.indexOf(item);\n  if (i !== -1) {\n    array.splice(i, 1);\n  }\n}\n\nfunction createIdGenerator() {\n  let id = 0;\n  return () => ++id;\n}\n\nfunction canUseDOM() {\n  return typeof document !== 'undefined';\n}\n\nexport default {\n  removeItem,\n  createIdGenerator,\n  canUseDOM,\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","import invariant from 'invariant';\n\nimport Attrs from './Attrs';\n\nexport const CTRL_TYPE = {\n  TITLE: 'title',\n  ETC: 'etc',\n};\n\nfunction link(prev, next) {\n  if (prev) {\n    prev.next = next;\n  }\n\n  if (next) {\n    next.prev = prev;\n  }\n}\n\nexport default class Controller {\n\n  /**\n   * Controller constructor.\n   *\n   * Controller is an object that manages an element in `<head>` element.\n   * If multiple controllers are bound to one element, only the last bound\n   * controller is used.\n   * The last bound controller is called top controller.\n   *\n   * When top controller is removed, previous controller of that one becomes\n   * the new top controller.\n   *\n   * @constructs Controller\n   * @param {string} type Type of controller.\n   * @param {string} tagName Element tag name.\n   * @param {object} attrs Object containing key-value attribute pairs, which is\n   * used to find element to bind controller to.\n   * @param {function} render A function that returns new element value.\n   * The type of return value depends on controller type.\n   * @param {object} options Controller options.\n   * @param {addListener} options.addListener A function that adds controller\n   * listener to event emitter.\n   * @param {removeListener} options.removeListener A function that removes\n   * controller listener.\n   * @return {Controller} a new Controller instance.\n   */\n  constructor(type, tagName, attrs, render, options = {}) {\n    invariant(typeof render === 'function', 'render function is required');\n    invariant(!options.addListener || options.removeListener,\n              'addListener requires removeListener');\n\n    this.type = type;\n\n    this.attrs = new Attrs(attrs);\n    this.tagName = tagName;\n    this.selector = this.tagName + this.attrs.selector;\n\n    this.render = render;\n\n    this.addListener = options.addListener;\n    this.removeListener = options.removeListener;\n  }\n\n  insertAfter(node) {\n    link(node, this.next);\n    link(this, node);\n  }\n\n  unlink() {\n    link(this.prev, this.next);\n    this.prev = undefined;\n    this.next = undefined;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/classes/Controller.js\n **/","import invariant from 'invariant';\n\nimport {\n  removeItem,\n} from './utils';\n\nclass OverrideListener {\n  constructor(override) {\n    this._controllerListeners = [];\n    this._override = override;\n\n    this.listening = false;\n  }\n\n  onUpdate() {\n    this._controllerListeners.forEach(listener => listener.onUpdate());\n  }\n\n  addControllerListener(controllerListener) {\n    this._controllerListeners.push(controllerListener);\n\n    if (this._override.addListener && !this.listening) {\n      this.listening = true;\n      this._listener = () => {\n        this.onUpdate();\n      };\n      this._addListenerRet = this._override.addListener(this._listener);\n    }\n  }\n\n  removeControllerListener(controllerListener) {\n    removeItem(this._controllerListeners, controllerListener);\n\n    if (this.listening && this._controllerListeners.length === 0) {\n      this._override.removeListener(this._listener, this._addListenerRet);\n      this.listening = false;\n    }\n  }\n\n  isReadyToRemove() {\n    return !this.listening && this._controllerListeners.length === 0;\n  }\n}\n\nclass ControllerListener {\n  constructor({ controller, overrideListener, handler }) {\n    this._overrideListener = overrideListener;\n    this.controller = this._controller = controller;\n\n    this._onUpdate = handler.onUpdate;\n    this._onStop = handler.onStop || function onStop() {};\n\n    this._listening = false;\n  }\n\n  onUpdate() {\n    this._onUpdate(this._controller);\n    return this;\n  }\n\n  onStop() {\n    this._onStop(this._controller);\n    return this;\n  }\n\n  startListening() {\n    this._overrideListener.addControllerListener(this);\n    if (this._controller.addListener) {\n      this._listener = () => {\n        this.onUpdate();\n      };\n      this._addListenerRet = this._controller.addListener(this._listener);\n    }\n    this._listening = true;\n    return this;\n  }\n\n  stopListening() {\n    this._overrideListener.removeControllerListener(this);\n    if (this._controller.removeListener) {\n      this._controller.removeListener(this._listener, this._addListenerRet);\n    }\n    this._listening = false;\n    return this;\n  }\n\n  isListening() {\n    return this._listening;\n  }\n\n  isReadyToRemove() {\n    return !this.isListening();\n  }\n}\n\nexport default function createEventManager(eventHandlers) {\n  const _overrideListeners = {\n    /* [override.id]: overriderListener */\n  };\n\n  const _controllerListeners = {\n    /* [controller.id]: controllerListener */\n  };\n\n  function _ensureOverrideListener(override) {\n    let overrideListener = _overrideListeners[override.id];\n    if (!overrideListener) {\n      overrideListener = _overrideListeners[override.id] = new OverrideListener(override);\n    }\n    return overrideListener;\n  }\n\n  function _getControllerListener(controller) {\n    return _controllerListeners[controller.id];\n  }\n\n  function _ensureControllerListener(controller) {\n    let controllerListener = _getControllerListener(controller);\n    if (controllerListener) {\n      return controllerListener;\n    }\n\n    const overrideListener = _ensureOverrideListener(controller.override);\n    controllerListener = _controllerListeners[controller.id] = new ControllerListener({\n      controller,\n      overrideListener,\n      handler: eventHandlers[controller.type],\n    });\n    return controllerListener;\n  }\n\n  function isControllerListening(controller) {\n    const controllerListener = _getControllerListener(controller);\n    if (!controllerListener) {\n      return false;\n    }\n\n    return controllerListener.isListening();\n  }\n\n  function startListeningController(controller) {\n    const controllerListener = _ensureControllerListener(controller);\n    controllerListener\n      .onUpdate()\n      .startListening();\n  }\n\n  function stopListeningController(controller) {\n    invariant(isControllerListening(controller),\n              'Only listening controller can be stopped');\n\n    const controllerListener = _getControllerListener(controller);\n    controllerListener\n      .stopListening()\n      .onStop();\n  }\n\n  function removeController(controller) {\n    const controllerListener = _getControllerListener(controller);\n    if (!controllerListener) {\n      return;\n    }\n\n    invariant(controllerListener.isReadyToRemove(),\n              'ControllerListener is not ready to remove');\n\n    delete _controllerListeners[controller.id];\n  }\n\n  function updateOverride(override) {\n    const overrideListener = _overrideListeners[override.id];\n    if (!overrideListener) {\n      return;\n    }\n\n    overrideListener.onUpdate();\n  }\n\n  function removeOverride(override) {\n    const overrideListener = _overrideListeners[override.id];\n    if (!overrideListener) {\n      return;\n    }\n\n    invariant(overrideListener.isReadyToRemove(),\n              'OverrideListener is not ready to remove');\n\n    delete _overrideListeners[override.id];\n  }\n\n  function destroy() {\n    Object.keys(_controllerListeners)\n      .map(id => _controllerListeners[id])\n      .filter(listener => listener.isListening())\n      .forEach(listener => {\n        listener.stopListening().onStop();\n      });\n  }\n\n  return {\n    startListeningController,\n    stopListeningController,\n    isControllerListening,\n    removeController,\n    updateOverride,\n    removeOverride,\n    destroy,\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/createEventManager.js\n **/"],"sourceRoot":""}